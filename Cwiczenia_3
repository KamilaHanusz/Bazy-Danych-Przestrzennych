--Zad.1
--Znajdź budynki, które zostały wybudowane lub wyremontowane 
--na przestrzeni roku (zmiana pomiędzy 2018 a 2019).

SELECT b_2019.*
FROM t2018_kar_buildings AS b_2018
RIGHT JOIN t2019_kar_buildings AS b_2019
ON b_2018.geom = b_2019.geom
WHERE b_2018.geom IS NULL; 


--Zad.2
--Znajdź ile nowych POI pojawiło się w promieniu 500 m od wyremontowanych lub
--wybudowanych budynków, które znalezione zostały w zadaniu 1. Policz je wg ich kategorii.

SELECT poi_2019.type, COUNT(DISTINCT poi_2019.*) AS sum
FROM t2018_kar_poi_table AS poi_2018
	RIGHT JOIN t2019_kar_poi_table AS poi_2019
	ON poi_2018.geom = poi_2019.geom,
t2018_kar_buildings AS b_2018 
	RIGHT JOIN t2019_kar_buildings AS b_2019 
	ON b_2018.geom = b_2019.geom 
WHERE poi_2018.geom IS NULL
AND b_2018.geom IS NULL
AND ST_DWithin(poi_2019.geom, b_2019.geom, 500)
GROUP BY poi_2019.type;


--Zad.3
--Utwórz nową tabelę o nazwie ‘streets_reprojected’, która zawierać będzie dane z tabeli
--T2019_KAR_STREETS przetransformowane do układu współrzędnych DHDN.Berlin/Cassini.

---------------------------Kod EPSG układu DHDN.Berlin/Cassini to 3068---------------------------

SELECT gid, link_id, st_name, ref_in_id, nref_in_id, func_class, speed_cat, 
	fr_speed_l, to_speed_l, dir_travel, ST_Transform(geom, 3068) AS geom 
	INTO streets_reprojected FROM t2019_kar_streets 

SELECT * FROM streets_reprojected;

DROP TABLE streets_reprojected;


--Zad.4
--Stwórz tabelę o nazwie ‘input_points’ i dodaj do niej dwa rekordy o geometrii punktowej.
--Użyj następujących współrzędnych:
--X       Y
--8.36093 49.03174
--8.39876 49.00644
--Przyjmij układ współrzędnych GPS.

CREATE TABLE input_points(id INTEGER, geom GEOMETRY);
INSERT INTO input_points VALUES(1, ST_GeomFromText('POINT(8.36093 49.03174)', 4326));
INSERT INTO input_points VALUES(2, ST_GeomFromText('POINT(8.39876 49.00644)', 4326));

SELECT * FROM input_points;

DROP TABLE input_points;


--Zad.5
--Zaktualizuj dane w tabeli ‘input_points’ tak, aby punkty te były w układzie współrzędnych
--DHDN.Berlin/Cassini. Wyświetl współrzędne za pomocą funkcji ST_AsText().

UPDATE input_points
SET geom = ST_Transform(geom, 3068);

SELECT ST_Astext(geom) FROM input_points;


--Zad.6
--Znajdź wszystkie skrzyżowania, które znajdują się w odległości 200 m od linii zbudowanej
--z punktów w tabeli ‘input_points’. Wykorzystaj tabelę T2019_STREET_NODE. Dokonaj
--reprojekcji geometrii, aby była zgodna z resztą tabel.

SELECT * FROM t2019_kar_street_node
WHERE ST_DWithin((SELECT ST_MakeLine(geom) FROM input_points), ST_Transform(geom, 3068), 200);


--Zad.7
--Policz jak wiele sklepów sportowych (‘Sporting Goods Store’ - tabela POIs) znajduje się
--w odległości 300 m od parków (LAND_USE_A).

SELECT COUNT(DISTINCT poi) AS sum
FROM t2019_kar_poi_table AS poi, t2019_kar_land_use_a AS parks
WHERE poi.type = 'Sporting Goods Store' AND parks.type = 'Park (City/County)'
AND ST_DWithin(poi.geom, parks.geom, 300);


--Zad.8
--Znajdź punkty przecięcia torów kolejowych (RAILWAYS) z ciekami (WATER_LINES). Zapisz
--znalezioną geometrię do osobnej tabeli o nazwie ‘T2019_KAR_BRIDGES’.

SELECT ST_Intersection(r.geom, w.geom) AS geom INTO T2019_KAR_BRIDGES 
FROM t2019_kar_railways AS r, t2019_kar_water_lines AS w
	WHERE ST_Intersects(r.geom, w.geom);

SELECT ST_AsText(geom) FROM T2019_KAR_BRIDGES;

DROP TABLE T2019_KAR_BRIDGES;








--2 Znajdź ile nowych POI pojawiło się w promieniu 500 m od wyremontowanych lub
--wybudowanych budynków, które znalezione zostały w zadaniu 1. Policz je wg ich kategorii.


CREATE TABLE buildingsNew AS(
SELECT DISTINCT T2019_KAR_BUILDINGS.* 
FROM T2019_KAR_BUILDINGS LEFT JOIN T2018_KAR_BUILDINGS ON T2019_KAR_BUILDINGS.geom = T2018_KAR_BUILDINGS.geom
WHERE T2018_KAR_BUILDINGS.geom IS NULL
);

SELECT T2019_KAR_POI_TABLE.type AS typ_obiektu ,COUNT(DISTINCT T2019_KAR_POI_TABLE.*) AS liczba_obiektow
FROM buildingsNew,T2019_KAR_POI_TABLE LEFT JOIN T2018_KAR_POI_TABLE ON T2019_KAR_POI_TABLE.geom = T2018_KAR_POI_TABLE.geom
WHERE T2018_KAR_POI_TABLE.geom IS NULL
AND ST_Intersects(ST_Buffer(buildingsNew.geom,500),T2019_KAR_POI_TABLE.geom)
GROUP BY T2019_KAR_POI_TABLE.type
